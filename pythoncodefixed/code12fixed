class Item:
    def __init__(self, name: str, price: float, stock: int):
        self.name = name
        self.price = max(0, price)
        self.stock = max(0, stock)

    def update_stock(self, quantity: int):
        if self.stock >= quantity:
            self.stock -= quantity
            return self.price * quantity
        return None

class Transaction:
    def __init__(self, item: Item, quantity: int, total: float):
        self.item = item
        self.quantity = quantity
        self.total = total

class CashierManager:
    def __init__(self):
        self.items = []
        self.transactions = []

    def add_item(self):
        name = input("Enter item name: ").strip()
        try:
            price = float(input("Enter price: "))
            stock = int(input("Enter stock: "))
            self.items.append(Item(name, price, stock))
            print(f"✅ Added '{name}' to inventory.")
        except ValueError:
            print("❌ Invalid input! Price must be a number, stock must be an integer.")

    def view_items(self):
        if not self.items:
            print("📭 No items available.")
            return
        print("\n=== Inventory ===")
        for i, item in enumerate(self.items, 1):
            print(f"{i}. {item.name} - ${item.price:.2f} - Stock: {item.stock}")

    def sell_item(self):
        self.view_items()
        try:
            index = int(input("Enter item number: ")) - 1
            qty = int(input("Enter quantity: "))

            if 0 <= index < len(self.items):
                item = self.items[index]
                total = item.update_stock(qty)

                if total is not None:
                    self.transactions.append(Transaction(item, qty, total))
                    print(f"🛒 Sold {qty} x {item.name} for ${total:.2f}")
                else:
                    print("❌ Not enough stock!")
            else:
                print("❌ Invalid item number!")
        except ValueError:
            print("❌ Invalid input!")

    def view_transactions(self):
        if not self.transactions:
            print("📭 No transactions yet.")
            return
        print("\n=== Transactions ===")
        for t in self.transactions:
            print(f"{t.quantity} x {t.item.name} - ${t.total:.2f}")

class CashierApp:
    def __init__(self):
        self.manager = CashierManager()

    def start(self):
        actions = {
            "1": self.manager.add_item,
            "2": self.manager.view_items,
            "3": self.manager.sell_item,
            "4": self.manager.view_transactions,
            "5": self.exit_app,
        }
        print("🛒 Welcome to Cashier Manager!")
        while True:
            print("\n1️⃣ Add Item\n2️⃣ View Items\n3️⃣ Sell Item\n4️⃣ View Transactions\n5️⃣ Exit")
            action = actions.get(input("Choose an option: ").strip(), self.invalid_choice)
            action()

    def invalid_choice(self):
        print("❌ Invalid choice! Try again.")

    def exit_app(self):
        print("👋 Exiting... Goodbye!")
        exit()

if __name__ == "__main__":
    CashierApp().start()
