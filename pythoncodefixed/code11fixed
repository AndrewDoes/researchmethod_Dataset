import json
from typing import List

FILE_NAME = "inventory.json"

class InventoryItem:
    def __init__(self, name: str, quantity: int, price: float, category: str):
        self.name = name.strip()
        self.quantity = max(0, quantity)
        self.price = max(0.0, price)
        self.category = category if category in ["Electronics", "Clothing", "Food"] else "Other"

    def to_dict(self):
        return vars(self)

class InventoryManager:
    def __init__(self):
        self.inventory: List[InventoryItem] = self.load_inventory()

    def load_inventory(self):
        try:
            with open(FILE_NAME, "r") as f:
                return [InventoryItem(**data) for data in json.load(f)]
        except (FileNotFoundError, json.JSONDecodeError):
            return []

    def save_inventory(self):
        try:
            with open(FILE_NAME, "w") as f:
                json.dump([item.to_dict() for item in self.inventory], f)
        except IOError:
            print("‚ö†Ô∏è Error saving inventory!")

    def add_item(self):
        name = input("Enter item name: ").strip()
        try:
            quantity = int(input("Enter quantity: ").strip())
            price = float(input("Enter price: ").strip())
            category = input("Enter category (Electronics, Clothing, Food): ").strip()
            self.inventory.append(InventoryItem(name, quantity, price, category))
            self.save_inventory()
            print(f"‚úÖ Item '{name}' added!")
        except ValueError:
            print("‚ùå Invalid input! Quantity must be an integer, price must be a number.")

    def view_inventory(self):
        if not self.inventory:
            print("üì≠ No items in inventory.")
            return
        print("\nüì¶ Inventory List:")
        for i, item in enumerate(self.inventory, 1):
            print(f"{i}. {item.name} - Qty: {item.quantity} - ${item.price:.2f} - {item.category}")

    def remove_item(self):
        self.view_inventory()
        try:
            num = int(input("Enter item number to remove: ").strip())
            if 1 <= num <= len(self.inventory):
                removed = self.inventory.pop(num - 1)
                self.save_inventory()
                print(f"üóëÔ∏è Removed {removed.name}")
            else:
                print("‚ùå Invalid number!")
        except ValueError:
            print("‚ùå Please enter a valid number.")

class InventoryApp:
    def __init__(self):
        self.manager = InventoryManager()

    def start(self):
        actions = {
            "1": self.manager.add_item,
            "2": self.manager.view_inventory,
            "3": self.manager.remove_item,
            "4": self.exit_app,
        }
        print("üì¶ Welcome to Inventory Manager!")
        while True:
            print("\n1Ô∏è‚É£ Add Item\n2Ô∏è‚É£ View Inventory\n3Ô∏è‚É£ Remove Item\n4Ô∏è‚É£ Exit")
            action = actions.get(input("Choose an option: ").strip(), self.invalid_choice)
            action()

    def invalid_choice(self):
        print("‚ö†Ô∏è Invalid choice! Try again.")

    def exit_app(self):
        print("üëã Exiting... Goodbye!")
        exit()

if __name__ == "__main__":
    InventoryApp().start()
