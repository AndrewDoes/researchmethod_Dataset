class Book:
    def __init__(self, title: str, author: str, year: int):
        self.title = title
        self.author = author
        self.year = max(0, year)
        self.is_borrowed = False

    def borrow(self):
        if self.is_borrowed:
            return False
        self.is_borrowed = True
        return True

    def return_book(self):
        if not self.is_borrowed:
            return False
        self.is_borrowed = False
        return True

class Library:
    def __init__(self):
        self.books = []

    def add_book(self):
        title = input("Enter book title: ").strip()
        author = input("Enter author: ").strip()
        try:
            year = int(input("Enter year: "))
            self.books.append(Book(title, author, year))
            print(f"‚úÖ Added '{title}' by {author} ({year}).")
        except ValueError:
            print("‚ùå Invalid year!")

    def view_books(self):
        if not self.books:
            print("üì≠ No books available.")
            return
        print("\n=== Library Books ===")
        for i, book in enumerate(self.books, 1):
            status = "Borrowed" if book.is_borrowed else "Available"
            print(f"{i}. {book.title} by {book.author} ({book.year}) - {status}")

    def borrow_book(self):
        self.view_books()
        try:
            index = int(input("Enter book number to borrow: ")) - 1
            if 0 <= index < len(self.books):
                if self.books[index].borrow():
                    print(f"üìñ Borrowed '{self.books[index].title}' by {self.books[index].author}.")
                else:
                    print("‚ùå This book is already borrowed!")
            else:
                print("‚ùå Invalid book number!")
        except ValueError:
            print("‚ùå Invalid input!")

    def return_book(self):
        borrowed_books = [book for book in self.books if book.is_borrowed]

        if not borrowed_books:
            print("üì≠ No borrowed books.")
            return

        print("\n=== Borrowed Books ===")
        for i, book in enumerate(borrowed_books, 1):
            print(f"{i}. {book.title} by {book.author}")

        try:
            index = int(input("Enter book number to return: ")) - 1
            if 0 <= index < len(borrowed_books):
                if borrowed_books[index].return_book():
                    print(f"üîÑ Returned '{borrowed_books[index].title}'.")
                else:
                    print("‚ùå This book is not borrowed!")
            else:
                print("‚ùå Invalid book number!")
        except ValueError:
            print("‚ùå Invalid input!")

class LibraryApp:
    def __init__(self):
        self.library = Library()

    def start(self):
        actions = {
            "1": self.library.add_book,
            "2": self.library.view_books,
            "3": self.library.borrow_book,
            "4": self.library.return_book,
            "5": self.exit_app,
        }
        print("üìö Welcome to Library Manager!")
        while True:
            print("\n1Ô∏è‚É£ Add Book\n2Ô∏è‚É£ View Books\n3Ô∏è‚É£ Borrow Book\n4Ô∏è‚É£ Return Book\n5Ô∏è‚É£ Exit")
            action = actions.get(input("Choose an option: ").strip(), self.invalid_choice)
            action()

    def invalid_choice(self):
        print("‚ùå Invalid choice! Try again.")

    def exit_app(self):
        print("üëã Exiting... Goodbye!")
        exit()

if __name__ == "__main__":
    LibraryApp().start()
